import streamlit as st
from utils.utils import navigate_to
from assets.data import obtener_lista_municipios
from assets.data import obtener_lista_tipos_organizacion
from assets.data import obtener_lista_tipos_apoyo
from api.posts import (
    crear_organizacion_completa, 
    crear_tipo_organizacion, 
    crear_tipo_apoyo,
    crear_linea_productiva,
    obtener_tipos_organizaciones,
    obtener_tipos_apoyos,
    obtener_lineas_productivas,
    crear_tipo_actividad,
    obtener_tipos_actividades
)
import time

def obtener_municipios_para_select():
    """Obtiene municipios en formato para selectbox conservando el ID"""
    municipios = obtener_lista_municipios(formato='completo')
    return [
        (m['id'], m['departamento_id'], f"{m['nombre']} - {m['departamento_nombre']}") 
        for m in municipios
    ]

def pantalla_registro_organizacion():
    st.markdown("## Registro organizaci√≥n")
    
    if st.button("‚¨ÖÔ∏è Atr√°s"):
        navigate_to("registrar")
        st.rerun()

    # Toggle para debug
    debug_mode = st.checkbox("üîß Modo Debug", help="Muestra informaci√≥n detallada del proceso")

    # Obtener listas de datos
    municipios = obtener_lista_municipios(formato='completo')
    tipos_organizacion_lista = obtener_lista_tipos_organizacion(formato='select')
    tipos_apoyo_lista = obtener_lista_tipos_apoyo(formato='select')
    
    # Obtener datos actuales de la API para los tipos que se pueden crear
    tipos_org_api = obtener_tipos_organizaciones() or []
    tipos_apoyo_api = obtener_tipos_apoyos() or []
    lineas_productivas_api = obtener_lineas_productivas() or []
    tipos_actividad_api = obtener_tipos_actividades() or []
    
    if debug_mode:
        st.write("üîç **Tipos de organizaci√≥n disponibles:**")
        st.json(tipos_org_api)
        st.write("üîç **Tipos de apoyo disponibles:**")
        st.json(tipos_apoyo_api)
        st.write("üîç **L√≠neas productivas disponibles:**")
        st.json(lineas_productivas_api)

    col1, col2 = st.columns(2)
    
    with col1:
        # Campos obligatorios
        nombre_organizacion = st.text_input("Nombre de la organizaci√≥n*", placeholder="Ej: Cooperativa San Jos√©")
        nit = st.text_input("NIT")
        
        # Tipo de organizaci√≥n con opci√≥n de crear nuevo
        crear_nuevo_tipo_org = st.checkbox("Crear nuevo tipo de organizaci√≥n")
        
        if crear_nuevo_tipo_org:
            nuevo_tipo_org_nombre = st.text_input("Nombre del nuevo tipo de organizaci√≥n*")
            tipo_org_seleccionado = None
        else:
            nuevo_tipo_org_nombre = None
            if tipos_org_api:
                seleccion_org = st.selectbox(
                    "Tipo de organizaci√≥n*",
                    options=range(len(tipos_org_api)),
                    format_func=lambda x: tipos_org_api[x]["nombre"],
                    help="Seleccione el tipo de organizaci√≥n"
                )
                
                if seleccion_org is not None:
                    tipo_org_seleccionado = tipos_org_api[seleccion_org]
                else:
                    tipo_org_seleccionado = None
            else:
                tipo_org_seleccionado = None
                st.warning("No hay tipos de organizaci√≥n disponibles. Crea uno nuevo.")

        # L√≠nea productiva con opci√≥n de crear nueva
        crear_nueva_linea_prod = st.checkbox("Crear nueva l√≠nea productiva")
        
        if crear_nueva_linea_prod:
            nueva_linea_prod_nombre = st.text_input("Nombre de la nueva l√≠nea productiva")
            linea_prod_seleccionada = None
        else:
            nueva_linea_prod_nombre = None
            if lineas_productivas_api:
                seleccion_linea = st.selectbox(
                    "L√≠nea productiva (opcional)",
                    options=range(len(lineas_productivas_api)),
                    format_func=lambda x: lineas_productivas_api[x]["nombre"],
                    help="Opcional: Seleccione una l√≠nea productiva"
                )
                
                if seleccion_linea is not None:
                    linea_prod_seleccionada = lineas_productivas_api[seleccion_linea]
                else:
                    linea_prod_seleccionada = None
            else:
                linea_prod_seleccionada = None
                if not crear_nueva_linea_prod:
                    st.info("No hay l√≠neas productivas disponibles. Puede crear una nueva si lo desea.")

        # N√∫mero de integrantes
        num_integrantes = st.number_input("N√∫mero de integrantes", min_value=1, value=1)

    with col2:
        municipios_con_id = obtener_municipios_para_select()
        # Municipio - mantener estructura original
        municipio_seleccionado = st.selectbox(
            "Municipio*",
            options=municipios_con_id,
            format_func=lambda x: x[2],  # Mostrar solo el nombre-description
            index=0,
            key="municipio_select"
        )
        municipio_id, departamento_id, municipio_texto = municipio_seleccionado
        municipio_nombre = municipio_texto.split(' - ')[0]
        departamento_nombre = municipio_texto.split(' - ')[1]

        # N√∫mero de mujeres
        num_mujeres = st.number_input("N√∫mero de mujeres", min_value=0, value=0)
        
        # Tipo de apoyo con opci√≥n de crear nuevo
        crear_nuevo_tipo_apoyo = st.checkbox("Crear nuevo tipo de apoyo")
        
        if crear_nuevo_tipo_apoyo:
            nuevo_tipo_apoyo_nombre = st.text_input("Nombre del nuevo tipo de apoyo*")
            tipo_apoyo_seleccionado = None
        else:
            nuevo_tipo_apoyo_nombre = None
            if tipos_apoyo_api:
                seleccion_apoyo = st.selectbox(
                    "Tipo de apoyo*",
                    options=range(len(tipos_apoyo_api)),
                    format_func=lambda x: tipos_apoyo_api[x]["nombre"],
                    help="Seleccione el tipo de apoyo"
                )
                
                if seleccion_apoyo is not None:
                    tipo_apoyo_seleccionado = tipos_apoyo_api[seleccion_apoyo]
                else:
                    tipo_apoyo_seleccionado = None
            else:
                tipo_apoyo_seleccionado = None
                st.warning("No hay tipos de apoyo disponibles. Crea uno nuevo.")

        # Otros campos opcionales
        es_org_mujeres = st.selectbox("¬øEs una organizaci√≥n de mujeres?", ["No", "S√≠"])

        # Campo para tipo de actividad
        crear_nuevo_tipo_actividad = st.checkbox("Crear nuevo tipo de actividad")

        if crear_nuevo_tipo_actividad:
            nuevo_tipo_actividad_nombre = st.text_input("Nombre del nuevo tipo de actividad*")
            tipo_actividad_seleccionado = None
        else:
            nuevo_tipo_actividad_nombre = None
            if tipos_actividad_api:
                # CORRECCI√ìN: Agregar opci√≥n "Sin seleccionar" y manejar √≠ndice None
                seleccion_actividad = st.selectbox(
                    "Tipo de actividad (opcional)",
                    options=tipos_actividad_api,
                    format_func=lambda x: x['nombre'],
                    key = 'tipo_actividad_select',
                    help="Seleccione un tipo de actividad"
                )
                tipo_actividad_seleccionado = seleccion_actividad
            else:
                tipo_actividad_seleccionado = None
                st.info("No hay tipos de actividad disponibles. Puede crear uno nuevo si lo desea.")

    # Bot√≥n de registro
    if st.button("Registrar", type="primary"):
        # Validaciones b√°sicas
        errores = []
        
        if not nombre_organizacion.strip():
            errores.append("Nombre de la organizaci√≥n es obligatorio")
            
        if crear_nuevo_tipo_org and not nuevo_tipo_org_nombre.strip():
            errores.append("Nombre del nuevo tipo de organizaci√≥n es obligatorio")
            
        if not crear_nuevo_tipo_org and not tipo_org_seleccionado:
            errores.append("Debe seleccionar un tipo de organizaci√≥n existente")
            
        if crear_nuevo_tipo_apoyo and not nuevo_tipo_apoyo_nombre.strip():
            errores.append("Nombre del nuevo tipo de apoyo es obligatorio")
            
        if not crear_nuevo_tipo_apoyo and not tipo_apoyo_seleccionado:
            errores.append("Debe seleccionar un tipo de apoyo existente")
            
        if not municipio_seleccionado:
            errores.append("Debe seleccionar un municipio")
        
        if errores:
            for error in errores:
                st.error(f"‚ùå {error}")
            return
            
        # Procesamiento
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            tipo_organizacion = None
            tipo_apoyo = None
            linea_productiva = None
            
            # PASO 1: Manejar el tipo de organizaci√≥n
            if crear_nuevo_tipo_org:
                status_text.text("Paso 1/4: Creando nuevo tipo de organizaci√≥n...")
                progress_bar.progress(15)
                
                if debug_mode:
                    st.write(f"üîç **Creando tipo de organizaci√≥n:** {nuevo_tipo_org_nombre}")
                
                tipo_org_creado = crear_tipo_organizacion(nuevo_tipo_org_nombre.strip())
                
                if tipo_org_creado:
                    if debug_mode:
                        st.write("‚úÖ **Respuesta del tipo de organizaci√≥n creado:**")
                        st.json(tipo_org_creado)
                    
                    if isinstance(tipo_org_creado, dict) and "id" in tipo_org_creado and "nombre" in tipo_org_creado:
                        tipo_organizacion = {
                            "id": tipo_org_creado["id"],
                            "nombre": tipo_org_creado["nombre"]
                        }
                        st.success(f"‚úÖ Tipo de organizaci√≥n '{nuevo_tipo_org_nombre}' creado con ID: {tipo_org_creado['id']}")
                    else:
                        st.error("‚ùå El tipo de organizaci√≥n se cre√≥ pero la respuesta no tiene la estructura esperada")
                        return
                else:
                    st.error("‚ùå Error al crear el nuevo tipo de organizaci√≥n")
                    return
            else:
                # Usar tipo existente
                progress_bar.progress(15)
                tipo_organizacion = {
                    "id": tipo_org_seleccionado["id"],
                    "nombre": tipo_org_seleccionado["nombre"]
                }
                if debug_mode:
                    st.write("‚úÖ **Usando tipo de organizaci√≥n existente:**")
                    st.json(tipo_organizacion)
            
            time.sleep(1)  # Pausa para dar tiempo a la API
            
            # PASO 2: Manejar la l√≠nea productiva (opcional)
            if crear_nueva_linea_prod and nueva_linea_prod_nombre:
                status_text.text("Paso 2/4: Creando nueva l√≠nea productiva...")
                progress_bar.progress(30)
                
                if debug_mode:
                    st.write(f"üîç **Creando l√≠nea productiva:** {nueva_linea_prod_nombre}")
                
                linea_prod_creada = crear_linea_productiva(nueva_linea_prod_nombre.strip())
                
                if linea_prod_creada:
                    if debug_mode:
                        st.write("‚úÖ **Respuesta de la l√≠nea productiva creada:**")
                        st.json(linea_prod_creada)
                    
                    if isinstance(linea_prod_creada, dict) and "id" in linea_prod_creada and "nombre" in linea_prod_creada:
                        linea_productiva = {
                            "id": linea_prod_creada["id"],
                            "nombre": linea_prod_creada["nombre"]
                        }
                        st.success(f"‚úÖ L√≠nea productiva '{nueva_linea_prod_nombre}' creada con ID: {linea_prod_creada['id']}")
                    else:
                        st.error("‚ùå La l√≠nea productiva se cre√≥ pero la respuesta no tiene la estructura esperada")
                        return
                else:
                    st.error("‚ùå Error al crear la nueva l√≠nea productiva")
                    return
            elif linea_prod_seleccionada:
                # Usar l√≠nea existente
                progress_bar.progress(30)
                linea_productiva = {
                    "id": linea_prod_seleccionada["id"],
                    "nombre": linea_prod_seleccionada["nombre"]
                }
                if debug_mode:
                    st.write("‚úÖ **Usando l√≠nea productiva existente:**")
                    st.json(linea_productiva)
            else:
                # Sin l√≠nea productiva
                progress_bar.progress(30)
                linea_productiva = {
                    "id": 0,
                    "nombre": ""
                }
            
            time.sleep(1)  # Pausa para dar tiempo a la API
            
            # PASO 3: Manejar el tipo de apoyo
            if crear_nuevo_tipo_apoyo:
                status_text.text("Paso 3/4: Creando nuevo tipo de apoyo...")
                progress_bar.progress(50)
                
                if debug_mode:
                    st.write(f"üîç **Creando tipo de apoyo:** {nuevo_tipo_apoyo_nombre}")
                
                tipo_apoyo_creado = crear_tipo_apoyo(nuevo_tipo_apoyo_nombre.strip())
                
                if tipo_apoyo_creado:
                    if debug_mode:
                        st.write("‚úÖ **Respuesta del tipo de apoyo creado:**")
                        st.json(tipo_apoyo_creado)
                    
                    if isinstance(tipo_apoyo_creado, dict) and "id" in tipo_apoyo_creado and "nombre" in tipo_apoyo_creado:
                        tipo_apoyo = {
                            "id": tipo_apoyo_creado["id"],
                            "nombre": tipo_apoyo_creado["nombre"]
                        }
                        st.success(f"‚úÖ Tipo de apoyo '{nuevo_tipo_apoyo_nombre}' creado con ID: {tipo_apoyo_creado['id']}")
                    else:
                        st.error("‚ùå El tipo de apoyo se cre√≥ pero la respuesta no tiene la estructura esperada")
                        return
                else:
                    st.error("‚ùå Error al crear el nuevo tipo de apoyo")
                    return
            else:
                # Usar tipo existente
                progress_bar.progress(50)
                tipo_apoyo = {
                    "id": tipo_apoyo_seleccionado["id"],
                    "nombre": tipo_apoyo_seleccionado["nombre"]
                }
                if debug_mode:
                    st.write("‚úÖ **Usando tipo de apoyo existente:**")
                    st.json(tipo_apoyo)
            
            time.sleep(1)  # Pausa para dar tiempo a la API
            # PASO 3.5: Manejar el tipo de actividad (a√±adir esto junto a los otros pasos)
            status_text.text("Paso 3.5/5: Procesando tipo de actividad...")
            progress_bar.progress(60)

            tipo_actividad = None
            if crear_nuevo_tipo_actividad and nuevo_tipo_actividad_nombre:
                if debug_mode:
                    st.write(f"üîç **Creando tipo de actividad:** {nuevo_tipo_actividad_nombre}")
                
                tipo_actividad_creado = crear_tipo_actividad(nuevo_tipo_actividad_nombre.strip())
                
                if tipo_actividad_creado:
                    if debug_mode:
                        st.write("‚úÖ **Respuesta del tipo de actividad creado:**")
                        st.json(tipo_actividad_creado)
                    
                    if isinstance(tipo_actividad_creado, dict) and "id" in tipo_actividad_creado and "nombre" in tipo_actividad_creado:
                        tipo_actividad = {
                            "id": tipo_actividad_creado["id"],
                            "nombre": tipo_actividad_creado["nombre"]
                        }
                        st.success(f"‚úÖ Tipo de actividad '{nuevo_tipo_actividad_nombre}' creado con ID: {tipo_actividad_creado['id']}")
                    else:
                        st.error("‚ùå El tipo de actividad se cre√≥ pero la respuesta no tiene la estructura esperada")
                        if debug_mode:
                            st.write("Estructura recibida:", tipo_actividad_creado)
                        return
                else:
                    st.error("‚ùå Error al crear el nuevo tipo de actividad")
                    return
            elif tipo_actividad_seleccionado:
                # Usar tipo existente
                tipo_actividad = {
                    "id": tipo_actividad_seleccionado["id"],
                    "nombre": tipo_actividad_seleccionado["nombre"]
                }
                if debug_mode:
                    st.write("‚úÖ **Usando tipo de actividad existente:**")
                    st.json(tipo_actividad)
            else:
                # Sin tipo de actividad (campo opcional)
                tipo_actividad = {
                    "id": 0,
                    "nombre": ""
                }
                if debug_mode:
                    st.write("‚ÑπÔ∏è **Sin tipo de actividad seleccionado**")

            time.sleep(0.5)
            # PASO 4: Crear organizaci√≥n completa
            status_text.text("Paso 4/4: Creando organizaci√≥n...")
            progress_bar.progress(70)
            
            # Preparar datos de la organizaci√≥n
            organizacion_data = {
                "id": 0,
                "nombre": nombre_organizacion.strip(),
                "municipio": {
                    "id": municipio_id,  # Ajustar seg√∫n tu estructura de municipios
                    "nombre": str(municipio_nombre),
                    "departamento": {
                        "id": departamento_id,  # Puede necesitar ajuste seg√∫n tu estructura
                        "nombre": str(departamento_nombre)
                    }
                },
                "nit": nit.strip() if nit else "",
                "integrantes": int(num_integrantes),
                "nummujeres": int(num_mujeres),
                "orgmujeres": True if es_org_mujeres == "S√≠" else False,
                "tipoorg": tipo_organizacion,
                "tipoactividad": {
                    "id": tipo_actividad["id"] if tipo_actividad else 0,
                    "nombre": tipo_actividad["nombre"] if tipo_actividad else ""
                },
                "lineaprod": linea_productiva,
                "tipoapoyo": tipo_apoyo
            }
            
            if debug_mode:
                st.write("üîç **Datos de la organizaci√≥n a enviar:**")
                st.json(organizacion_data)
            
            progress_bar.progress(90)
            resultado = crear_organizacion_completa(organizacion_data)
            
            if resultado:
                progress_bar.progress(100)
                status_text.text("‚úÖ ¬°Organizaci√≥n creada exitosamente!")
                
                organizacion_id = resultado.get('id', 'N/A')
                st.success(f"üéâ Organizaci√≥n '{nombre_organizacion}' creada exitosamente!")
                st.info(f"üìù ID de la organizaci√≥n: {organizacion_id}")
                
                # Mostrar resumen
                with st.expander("üìã Resumen de la organizaci√≥n creada", expanded=True):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**Nombre:** {nombre_organizacion}")
                        st.write(f"**NIT:** {nit or 'No especificado'}")
                        st.write(f"**Tipo:** {tipo_organizacion['nombre']} (ID: {tipo_organizacion['id']})")
                        st.write(f"**Municipio:** {municipio_seleccionado}")
                    with col2:
                        st.write(f"**Integrantes:** {num_integrantes}")
                        st.write(f"**Mujeres:** {num_mujeres}")
                        st.write(f"**Org. de mujeres:** {es_org_mujeres}")
                        st.write(f"**Tipo de apoyo:** {tipo_apoyo['nombre']} (ID: {tipo_apoyo['id']})")
                        st.write(f"**ID organizaci√≥n:** {organizacion_id}")
                
                st.balloons()
                
                # Opcional: bot√≥n para crear otra organizaci√≥n
                if st.button("‚ûï Crear otra organizaci√≥n"):
                    st.rerun()
                    
            else:
                progress_bar.progress(0)
                status_text.text("‚ùå Error al crear la organizaci√≥n")
                st.error("‚ùå No se pudo crear la organizaci√≥n. Revisa los logs de debug.")
                
        except Exception as e:
            progress_bar.progress(0)
            status_text.text("‚ùå Error inesperado")
            st.error(f"üí• Error inesperado: {str(e)}")
            if debug_mode:
                st.exception(e)